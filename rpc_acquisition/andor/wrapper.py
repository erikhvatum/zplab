# Autogenerated by make_andor.py.  All changes made to this file will be lost
# the next time make_andor.py is executed!
import ctypes
from .common import *

_at_core_lib = None
_at_util_lib = None
_at_camera_handle = None

_at_wchar_scratch = ctypes.create_unicode_buffer(255)

def RegisterFeatureCallback(Feature, EvCallback, Context):
    """RegisterFeatureCallback(Feature, EvCallback, Context)
    
    Parameters:
        Feature: str
        EvCallback: FeatureCallback
        Context: ctypes.c_void_p"""
    if _at_camera_handle is not None:
        return _at_core_lib.AT_RegisterFeatureCallback(_at_camera_handle, Feature, EvCallback, Context)
    else:
        raise AndorError('Andor library not initialized')

def UnregisterFeatureCallback(Feature, EvCallback, Context):
    """UnregisterFeatureCallback(Feature, EvCallback, Context)
    
    Parameters:
        Feature: str
        EvCallback: FeatureCallback
        Context: ctypes.c_void_p"""
    if _at_camera_handle is not None:
        return _at_core_lib.AT_UnregisterFeatureCallback(_at_camera_handle, Feature, EvCallback, Context)
    else:
        raise AndorError('Andor library not initialized')

def IsImplemented(Feature):
    """IsImplemented(Feature) -> Implemented
    
    Parameters:
        Feature: str
    Return value:
        Implemented: ctypes.c_int"""
    if _at_camera_handle is not None:
        return _at_core_lib.AT_IsImplemented(_at_camera_handle, Feature) != AT_FALSE
    else:
        raise AndorError('Andor library not initialized')

def IsReadable(Feature):
    """IsReadable(Feature) -> Readable
    
    Parameters:
        Feature: str
    Return value:
        Readable: ctypes.c_int"""
    if _at_camera_handle is not None:
        return _at_core_lib.AT_IsReadable(_at_camera_handle, Feature) != AT_FALSE
    else:
        raise AndorError('Andor library not initialized')

def IsWritable(Feature):
    """IsWritable(Feature) -> Writable
    
    Parameters:
        Feature: str
    Return value:
        Writable: ctypes.c_int"""
    if _at_camera_handle is not None:
        return _at_core_lib.AT_IsWritable(_at_camera_handle, Feature) != AT_FALSE
    else:
        raise AndorError('Andor library not initialized')

def IsReadOnly(Feature):
    """IsReadOnly(Feature) -> ReadOnly
    
    Parameters:
        Feature: str
    Return value:
        ReadOnly: ctypes.c_int"""
    if _at_camera_handle is not None:
        return _at_core_lib.AT_IsReadOnly(_at_camera_handle, Feature) != AT_FALSE
    else:
        raise AndorError('Andor library not initialized')

def SetInt(Feature, Value):
    """SetInt(Feature, Value)
    
    Parameters:
        Feature: str
        Value: ctypes.c_int64"""
    if _at_camera_handle is not None:
        return _at_core_lib.AT_SetInt(_at_camera_handle, Feature, Value)
    else:
        raise AndorError('Andor library not initialized')

def GetInt(Feature):
    """GetInt(Feature) -> Value
    
    Parameters:
        Feature: str
    Return value:
        Value: ctypes.c_int64"""
    if _at_camera_handle is not None:
        return _at_core_lib.AT_GetInt(_at_camera_handle, Feature)
    else:
        raise AndorError('Andor library not initialized')

def GetIntMax(Feature):
    """GetIntMax(Feature) -> MaxValue
    
    Parameters:
        Feature: str
    Return value:
        MaxValue: ctypes.c_int64"""
    if _at_camera_handle is not None:
        return _at_core_lib.AT_GetIntMax(_at_camera_handle, Feature)
    else:
        raise AndorError('Andor library not initialized')

def GetIntMin(Feature):
    """GetIntMin(Feature) -> MinValue
    
    Parameters:
        Feature: str
    Return value:
        MinValue: ctypes.c_int64"""
    if _at_camera_handle is not None:
        return _at_core_lib.AT_GetIntMin(_at_camera_handle, Feature)
    else:
        raise AndorError('Andor library not initialized')

def SetFloat(Feature, Value):
    """SetFloat(Feature, Value)
    
    Parameters:
        Feature: str
        Value: ctypes.c_double"""
    if _at_camera_handle is not None:
        return _at_core_lib.AT_SetFloat(_at_camera_handle, Feature, Value)
    else:
        raise AndorError('Andor library not initialized')

def GetFloat(Feature):
    """GetFloat(Feature) -> Value
    
    Parameters:
        Feature: str
    Return value:
        Value: ctypes.c_double"""
    if _at_camera_handle is not None:
        return _at_core_lib.AT_GetFloat(_at_camera_handle, Feature)
    else:
        raise AndorError('Andor library not initialized')

def GetFloatMax(Feature):
    """GetFloatMax(Feature) -> MaxValue
    
    Parameters:
        Feature: str
    Return value:
        MaxValue: ctypes.c_double"""
    if _at_camera_handle is not None:
        return _at_core_lib.AT_GetFloatMax(_at_camera_handle, Feature)
    else:
        raise AndorError('Andor library not initialized')

def GetFloatMin(Feature):
    """GetFloatMin(Feature) -> MinValue
    
    Parameters:
        Feature: str
    Return value:
        MinValue: ctypes.c_double"""
    if _at_camera_handle is not None:
        return _at_core_lib.AT_GetFloatMin(_at_camera_handle, Feature)
    else:
        raise AndorError('Andor library not initialized')

def SetBool(Feature, Bool):
    """SetBool(Feature, Bool)
    
    Parameters:
        Feature: str
        Bool: ctypes.c_int"""
    if _at_camera_handle is not None:
        return _at_core_lib.AT_SetBool(_at_camera_handle, Feature, Bool)
    else:
        raise AndorError('Andor library not initialized')

def GetBool(Feature):
    """GetBool(Feature) -> Bool
    
    Parameters:
        Feature: str
    Return value:
        Bool: ctypes.c_int"""
    if _at_camera_handle is not None:
        return _at_core_lib.AT_GetBool(_at_camera_handle, Feature) != AT_FALSE
    else:
        raise AndorError('Andor library not initialized')

def SetEnumIndex(Feature, Value):
    """SetEnumIndex(Feature, Value)
    
    Parameters:
        Feature: str
        Value: ctypes.c_int"""
    if _at_camera_handle is not None:
        return _at_core_lib.AT_SetEnumIndex(_at_camera_handle, Feature, Value)
    else:
        raise AndorError('Andor library not initialized')

def SetEnumString(Feature, String):
    """SetEnumString(Feature, String)
    
    Parameters:
        Feature: str
        String: str"""
    if _at_camera_handle is not None:
        return _at_core_lib.AT_SetEnumString(_at_camera_handle, Feature, String)
    else:
        raise AndorError('Andor library not initialized')

def GetEnumIndex(Feature):
    """GetEnumIndex(Feature) -> Value
    
    Parameters:
        Feature: str
    Return value:
        Value: ctypes.c_int"""
    if _at_camera_handle is not None:
        return _at_core_lib.AT_GetEnumIndex(_at_camera_handle, Feature)
    else:
        raise AndorError('Andor library not initialized')

def GetEnumCount(Feature):
    """GetEnumCount(Feature) -> Count
    
    Parameters:
        Feature: str
    Return value:
        Count: ctypes.c_int"""
    if _at_camera_handle is not None:
        return _at_core_lib.AT_GetEnumCount(_at_camera_handle, Feature)
    else:
        raise AndorError('Andor library not initialized')

def IsEnumIndexAvailable(Feature, Index):
    """IsEnumIndexAvailable(Feature, Index) -> Available
    
    Parameters:
        Feature: str
        Index: ctypes.c_int
    Return value:
        Available: ctypes.c_int"""
    if _at_camera_handle is not None:
        return _at_core_lib.AT_IsEnumIndexAvailable(_at_camera_handle, Feature, Index) != AT_FALSE
    else:
        raise AndorError('Andor library not initialized')

def IsEnumIndexImplemented(Feature, Index):
    """IsEnumIndexImplemented(Feature, Index) -> Implemented
    
    Parameters:
        Feature: str
        Index: ctypes.c_int
    Return value:
        Implemented: ctypes.c_int"""
    if _at_camera_handle is not None:
        return _at_core_lib.AT_IsEnumIndexImplemented(_at_camera_handle, Feature, Index) != AT_FALSE
    else:
        raise AndorError('Andor library not initialized')

def GetEnumStringByIndex(Feature, Index):
    """GetEnumStringByIndex(Feature, Index) -> String
    
    Parameters:
        Feature: str
        Index: ctypes.c_int
    Return value:
        String: str"""
    if _at_camera_handle is not None:
        _at_core_lib.AT_GetEnumStringByIndex(_at_camera_handle, Feature, Index, _at_wchar_scratch, _at_wchar_scratch._length_)
        return _at_wchar_scratch.value
    else:
        raise AndorError('Andor library not initialized')

def Command(Feature):
    """Command(Feature)
    
    Parameters:
        Feature: str"""
    if _at_camera_handle is not None:
        return _at_core_lib.AT_Command(_at_camera_handle, Feature)
    else:
        raise AndorError('Andor library not initialized')

def SetString(Feature, String):
    """SetString(Feature, String)
    
    Parameters:
        Feature: str
        String: str"""
    if _at_camera_handle is not None:
        return _at_core_lib.AT_SetString(_at_camera_handle, Feature, String)
    else:
        raise AndorError('Andor library not initialized')

def GetString(Feature):
    """GetString(Feature) -> String
    
    Parameters:
        Feature: str
    Return value:
        String: str"""
    if _at_camera_handle is not None:
        _at_core_lib.AT_GetString(_at_camera_handle, Feature, _at_wchar_scratch, _at_wchar_scratch._length_)
        return _at_wchar_scratch.value
    else:
        raise AndorError('Andor library not initialized')

def GetStringMaxLength(Feature):
    """GetStringMaxLength(Feature) -> MaxStringLength
    
    Parameters:
        Feature: str
    Return value:
        MaxStringLength: ctypes.c_int"""
    if _at_camera_handle is not None:
        return _at_core_lib.AT_GetStringMaxLength(_at_camera_handle, Feature)
    else:
        raise AndorError('Andor library not initialized')

def QueueBuffer(Ptr, PtrSize):
    """QueueBuffer(Ptr, PtrSize)
    
    Parameters:
        Ptr: ctypes.POINTER(ctypes.c_uint8)
        PtrSize: ctypes.c_int"""
    if _at_camera_handle is not None:
        return _at_core_lib.AT_QueueBuffer(_at_camera_handle, Ptr, PtrSize)
    else:
        raise AndorError('Andor library not initialized')

def WaitBuffer(Timeout):
    """WaitBuffer(Timeout) -> Ptr, PtrSize
    
    Parameters:
        Timeout: ctypes.c_uint
    Return values:
        Ptr: ctypes.POINTER(ctypes.c_uint8)
        PtrSize: ctypes.c_int"""
    if _at_camera_handle is not None:
        return _at_core_lib.AT_WaitBuffer(_at_camera_handle, Timeout)
    else:
        raise AndorError('Andor library not initialized')

def Flush():
    """Flush()"""
    if _at_camera_handle is not None:
        return _at_core_lib.AT_Flush(_at_camera_handle, )
    else:
        raise AndorError('Andor library not initialized')

def ConvertBuffer(inputBuffer, outputBuffer, width, height, stride, inputPixelEncoding, outputPixelEncoding):
    """ConvertBuffer(inputBuffer, outputBuffer, width, height, stride, inputPixelEncoding, outputPixelEncoding)
    
    Parameters:
        inputBuffer: ctypes.POINTER(ctypes.c_uint8)
        outputBuffer: ctypes.POINTER(ctypes.c_uint8)
        width: ctypes.c_int64
        height: ctypes.c_int64
        stride: ctypes.c_int64
        inputPixelEncoding: str
        outputPixelEncoding: str"""
    return _at_util_lib.AT_ConvertBuffer(inputBuffer, outputBuffer, width, height, stride, inputPixelEncoding, outputPixelEncoding)


def _setup_core_functions():
    _prototype_AT_InitialiseLibrary = ctypes.CFUNCTYPE(ctypes.c_int)
    _at_core_lib.AT_InitialiseLibrary = _prototype_AT_InitialiseLibrary(("AT_InitialiseLibrary", _at_core_lib), ())
    _at_core_lib.AT_InitialiseLibrary.errcheck = _at_errcheck
    
    _prototype_AT_FinaliseLibrary = ctypes.CFUNCTYPE(ctypes.c_int)
    _at_core_lib.AT_FinaliseLibrary = _prototype_AT_FinaliseLibrary(("AT_FinaliseLibrary", _at_core_lib), ())
    _at_core_lib.AT_FinaliseLibrary.errcheck = _at_errcheck
    
    _prototype_AT_Open = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.POINTER(ctypes.c_int))
    _at_core_lib.AT_Open = _prototype_AT_Open(("AT_Open", _at_core_lib), ((1, 'CameraIndex'), (2, 'Hndl')))
    _at_core_lib.AT_Open.errcheck = _at_errcheck
    
    _prototype_AT_Close = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int)
    _at_core_lib.AT_Close = _prototype_AT_Close(("AT_Close", _at_core_lib), ((1, 'Hndl'),))
    _at_core_lib.AT_Close.errcheck = _at_errcheck
    
    _prototype_AT_RegisterFeatureCallback = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_wchar_p, FeatureCallback, ctypes.c_void_p)
    _at_core_lib.AT_RegisterFeatureCallback = _prototype_AT_RegisterFeatureCallback(("AT_RegisterFeatureCallback", _at_core_lib), ((1, 'Hndl'), (1, 'Feature'), (1, 'EvCallback'), (1, 'Context')))
    _at_core_lib.AT_RegisterFeatureCallback.errcheck = _at_errcheck
    
    _prototype_AT_UnregisterFeatureCallback = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_wchar_p, FeatureCallback, ctypes.c_void_p)
    _at_core_lib.AT_UnregisterFeatureCallback = _prototype_AT_UnregisterFeatureCallback(("AT_UnregisterFeatureCallback", _at_core_lib), ((1, 'Hndl'), (1, 'Feature'), (1, 'EvCallback'), (1, 'Context')))
    _at_core_lib.AT_UnregisterFeatureCallback.errcheck = _at_errcheck
    
    _prototype_AT_IsImplemented = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_wchar_p, ctypes.POINTER(ctypes.c_int))
    _at_core_lib.AT_IsImplemented = _prototype_AT_IsImplemented(("AT_IsImplemented", _at_core_lib), ((1, 'Hndl'), (1, 'Feature'), (2, 'Implemented')))
    _at_core_lib.AT_IsImplemented.errcheck = _at_errcheck
    
    _prototype_AT_IsReadable = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_wchar_p, ctypes.POINTER(ctypes.c_int))
    _at_core_lib.AT_IsReadable = _prototype_AT_IsReadable(("AT_IsReadable", _at_core_lib), ((1, 'Hndl'), (1, 'Feature'), (2, 'Readable')))
    _at_core_lib.AT_IsReadable.errcheck = _at_errcheck
    
    _prototype_AT_IsWritable = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_wchar_p, ctypes.POINTER(ctypes.c_int))
    _at_core_lib.AT_IsWritable = _prototype_AT_IsWritable(("AT_IsWritable", _at_core_lib), ((1, 'Hndl'), (1, 'Feature'), (2, 'Writable')))
    _at_core_lib.AT_IsWritable.errcheck = _at_errcheck
    
    _prototype_AT_IsReadOnly = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_wchar_p, ctypes.POINTER(ctypes.c_int))
    _at_core_lib.AT_IsReadOnly = _prototype_AT_IsReadOnly(("AT_IsReadOnly", _at_core_lib), ((1, 'Hndl'), (1, 'Feature'), (2, 'ReadOnly')))
    _at_core_lib.AT_IsReadOnly.errcheck = _at_errcheck
    
    _prototype_AT_SetInt = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_wchar_p, ctypes.c_int64)
    _at_core_lib.AT_SetInt = _prototype_AT_SetInt(("AT_SetInt", _at_core_lib), ((1, 'Hndl'), (1, 'Feature'), (1, 'Value')))
    _at_core_lib.AT_SetInt.errcheck = _at_errcheck
    
    _prototype_AT_GetInt = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_wchar_p, ctypes.POINTER(ctypes.c_int64))
    _at_core_lib.AT_GetInt = _prototype_AT_GetInt(("AT_GetInt", _at_core_lib), ((1, 'Hndl'), (1, 'Feature'), (2, 'Value')))
    _at_core_lib.AT_GetInt.errcheck = _at_errcheck
    
    _prototype_AT_GetIntMax = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_wchar_p, ctypes.POINTER(ctypes.c_int64))
    _at_core_lib.AT_GetIntMax = _prototype_AT_GetIntMax(("AT_GetIntMax", _at_core_lib), ((1, 'Hndl'), (1, 'Feature'), (2, 'MaxValue')))
    _at_core_lib.AT_GetIntMax.errcheck = _at_errcheck
    
    _prototype_AT_GetIntMin = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_wchar_p, ctypes.POINTER(ctypes.c_int64))
    _at_core_lib.AT_GetIntMin = _prototype_AT_GetIntMin(("AT_GetIntMin", _at_core_lib), ((1, 'Hndl'), (1, 'Feature'), (2, 'MinValue')))
    _at_core_lib.AT_GetIntMin.errcheck = _at_errcheck
    
    _prototype_AT_SetFloat = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_wchar_p, ctypes.c_double)
    _at_core_lib.AT_SetFloat = _prototype_AT_SetFloat(("AT_SetFloat", _at_core_lib), ((1, 'Hndl'), (1, 'Feature'), (1, 'Value')))
    _at_core_lib.AT_SetFloat.errcheck = _at_errcheck
    
    _prototype_AT_GetFloat = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_wchar_p, ctypes.POINTER(ctypes.c_double))
    _at_core_lib.AT_GetFloat = _prototype_AT_GetFloat(("AT_GetFloat", _at_core_lib), ((1, 'Hndl'), (1, 'Feature'), (2, 'Value')))
    _at_core_lib.AT_GetFloat.errcheck = _at_errcheck
    
    _prototype_AT_GetFloatMax = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_wchar_p, ctypes.POINTER(ctypes.c_double))
    _at_core_lib.AT_GetFloatMax = _prototype_AT_GetFloatMax(("AT_GetFloatMax", _at_core_lib), ((1, 'Hndl'), (1, 'Feature'), (2, 'MaxValue')))
    _at_core_lib.AT_GetFloatMax.errcheck = _at_errcheck
    
    _prototype_AT_GetFloatMin = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_wchar_p, ctypes.POINTER(ctypes.c_double))
    _at_core_lib.AT_GetFloatMin = _prototype_AT_GetFloatMin(("AT_GetFloatMin", _at_core_lib), ((1, 'Hndl'), (1, 'Feature'), (2, 'MinValue')))
    _at_core_lib.AT_GetFloatMin.errcheck = _at_errcheck
    
    _prototype_AT_SetBool = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_wchar_p, ctypes.c_int)
    _at_core_lib.AT_SetBool = _prototype_AT_SetBool(("AT_SetBool", _at_core_lib), ((1, 'Hndl'), (1, 'Feature'), (1, 'Bool')))
    _at_core_lib.AT_SetBool.errcheck = _at_errcheck
    
    _prototype_AT_GetBool = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_wchar_p, ctypes.POINTER(ctypes.c_int))
    _at_core_lib.AT_GetBool = _prototype_AT_GetBool(("AT_GetBool", _at_core_lib), ((1, 'Hndl'), (1, 'Feature'), (2, 'Bool')))
    _at_core_lib.AT_GetBool.errcheck = _at_errcheck
    
    _prototype_AT_SetEnumIndex = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_wchar_p, ctypes.c_int)
    _at_core_lib.AT_SetEnumIndex = _prototype_AT_SetEnumIndex(("AT_SetEnumIndex", _at_core_lib), ((1, 'Hndl'), (1, 'Feature'), (1, 'Value')))
    _at_core_lib.AT_SetEnumIndex.errcheck = _at_errcheck
    
    _prototype_AT_SetEnumString = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_wchar_p, ctypes.c_wchar_p)
    _at_core_lib.AT_SetEnumString = _prototype_AT_SetEnumString(("AT_SetEnumString", _at_core_lib), ((1, 'Hndl'), (1, 'Feature'), (1, 'String')))
    _at_core_lib.AT_SetEnumString.errcheck = _at_errcheck
    
    _prototype_AT_GetEnumIndex = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_wchar_p, ctypes.POINTER(ctypes.c_int))
    _at_core_lib.AT_GetEnumIndex = _prototype_AT_GetEnumIndex(("AT_GetEnumIndex", _at_core_lib), ((1, 'Hndl'), (1, 'Feature'), (2, 'Value')))
    _at_core_lib.AT_GetEnumIndex.errcheck = _at_errcheck
    
    _prototype_AT_GetEnumCount = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_wchar_p, ctypes.POINTER(ctypes.c_int))
    _at_core_lib.AT_GetEnumCount = _prototype_AT_GetEnumCount(("AT_GetEnumCount", _at_core_lib), ((1, 'Hndl'), (1, 'Feature'), (2, 'Count')))
    _at_core_lib.AT_GetEnumCount.errcheck = _at_errcheck
    
    _prototype_AT_IsEnumIndexAvailable = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_wchar_p, ctypes.c_int, ctypes.POINTER(ctypes.c_int))
    _at_core_lib.AT_IsEnumIndexAvailable = _prototype_AT_IsEnumIndexAvailable(("AT_IsEnumIndexAvailable", _at_core_lib), ((1, 'Hndl'), (1, 'Feature'), (1, 'Index'), (2, 'Available')))
    _at_core_lib.AT_IsEnumIndexAvailable.errcheck = _at_errcheck
    
    _prototype_AT_IsEnumIndexImplemented = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_wchar_p, ctypes.c_int, ctypes.POINTER(ctypes.c_int))
    _at_core_lib.AT_IsEnumIndexImplemented = _prototype_AT_IsEnumIndexImplemented(("AT_IsEnumIndexImplemented", _at_core_lib), ((1, 'Hndl'), (1, 'Feature'), (1, 'Index'), (2, 'Implemented')))
    _at_core_lib.AT_IsEnumIndexImplemented.errcheck = _at_errcheck
    
    _prototype_AT_GetEnumStringByIndex = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_wchar_p, ctypes.c_int, ctypes.c_wchar_p, ctypes.c_int)
    _at_core_lib.AT_GetEnumStringByIndex = _prototype_AT_GetEnumStringByIndex(("AT_GetEnumStringByIndex", _at_core_lib), ((1, 'Hndl'), (1, 'Feature'), (1, 'Index'), (1, 'String'), (1, 'StringLength')))
    _at_core_lib.AT_GetEnumStringByIndex.errcheck = _at_errcheck
    
    _prototype_AT_Command = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_wchar_p)
    _at_core_lib.AT_Command = _prototype_AT_Command(("AT_Command", _at_core_lib), ((1, 'Hndl'), (1, 'Feature')))
    _at_core_lib.AT_Command.errcheck = _at_errcheck
    
    _prototype_AT_SetString = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_wchar_p, ctypes.c_wchar_p)
    _at_core_lib.AT_SetString = _prototype_AT_SetString(("AT_SetString", _at_core_lib), ((1, 'Hndl'), (1, 'Feature'), (1, 'String')))
    _at_core_lib.AT_SetString.errcheck = _at_errcheck
    
    _prototype_AT_GetString = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_wchar_p, ctypes.c_wchar_p, ctypes.c_int)
    _at_core_lib.AT_GetString = _prototype_AT_GetString(("AT_GetString", _at_core_lib), ((1, 'Hndl'), (1, 'Feature'), (1, 'String'), (1, 'StringLength')))
    _at_core_lib.AT_GetString.errcheck = _at_errcheck
    
    _prototype_AT_GetStringMaxLength = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.c_wchar_p, ctypes.POINTER(ctypes.c_int))
    _at_core_lib.AT_GetStringMaxLength = _prototype_AT_GetStringMaxLength(("AT_GetStringMaxLength", _at_core_lib), ((1, 'Hndl'), (1, 'Feature'), (2, 'MaxStringLength')))
    _at_core_lib.AT_GetStringMaxLength.errcheck = _at_errcheck
    
    _prototype_AT_QueueBuffer = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.POINTER(ctypes.c_uint8), ctypes.c_int)
    _at_core_lib.AT_QueueBuffer = _prototype_AT_QueueBuffer(("AT_QueueBuffer", _at_core_lib), ((1, 'Hndl'), (1, 'Ptr'), (1, 'PtrSize')))
    _at_core_lib.AT_QueueBuffer.errcheck = _at_errcheck
    
    _prototype_AT_WaitBuffer = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int, ctypes.POINTER(ctypes.POINTER(ctypes.c_uint8)), ctypes.POINTER(ctypes.c_int), ctypes.c_uint)
    _at_core_lib.AT_WaitBuffer = _prototype_AT_WaitBuffer(("AT_WaitBuffer", _at_core_lib), ((1, 'Hndl'), (2, 'Ptr'), (2, 'PtrSize'), (1, 'Timeout')))
    _at_core_lib.AT_WaitBuffer.errcheck = _at_errcheck
    
    _prototype_AT_Flush = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_int)
    _at_core_lib.AT_Flush = _prototype_AT_Flush(("AT_Flush", _at_core_lib), ((1, 'Hndl'),))
    _at_core_lib.AT_Flush.errcheck = _at_errcheck

def _setup_util_functions():
    _prototype_AT_ConvertBuffer = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_uint8), ctypes.POINTER(ctypes.c_uint8), ctypes.c_int64, ctypes.c_int64, ctypes.c_int64, ctypes.c_wchar_p, ctypes.c_wchar_p)
    _at_util_lib.AT_ConvertBuffer = _prototype_AT_ConvertBuffer(("AT_ConvertBuffer", _at_util_lib), ((1, 'inputBuffer'), (1, 'outputBuffer'), (1, 'width'), (1, 'height'), (1, 'stride'), (1, 'inputPixelEncoding'), (1, 'outputPixelEncoding')))
    _at_util_lib.AT_ConvertBuffer.errcheck = _at_errcheck
    
    _prototype_AT_InitialiseUtilityLibrary = ctypes.CFUNCTYPE(ctypes.c_int)
    _at_util_lib.AT_InitialiseUtilityLibrary = _prototype_AT_InitialiseUtilityLibrary(("AT_InitialiseUtilityLibrary", _at_util_lib), ())
    _at_util_lib.AT_InitialiseUtilityLibrary.errcheck = _at_errcheck
    
    _prototype_AT_FinaliseUtilityLibrary = ctypes.CFUNCTYPE(ctypes.c_int)
    _at_util_lib.AT_FinaliseUtilityLibrary = _prototype_AT_FinaliseUtilityLibrary(("AT_FinaliseUtilityLibrary", _at_util_lib), ())
    _at_util_lib.AT_FinaliseUtilityLibrary.errcheck = _at_errcheck
