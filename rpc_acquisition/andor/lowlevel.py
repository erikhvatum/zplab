import ctypes
import atexit
import sys

# import all the autogenerated functions and definitions
# note: also pulls in common which provides AndorError and several other constants
from .wrapper import *

# Provided for reference purposes, the FeatureStrings list contains all the "feature strings"
# listed in the Andor SDK documentation.  The value given for the Feature argument to functions
# provided by this module should be a string appearing in this list.
FeatureStrings = [
    'AccumulateCount',
    'AcquisitionStart',
    'AcquisitionStop',
    'AOIBinning',
    'AOIHBin',
    'AOIHeight',
    'AOILeft',
    'AOIStride',
    'AOITop',
    'AOIVBin',
    'AOIWidth',
    'AuxiliaryOutSource',
    'BaselineLevel',
    'BitDepth',
    'BufferOverflowEvent',
    'BytesPerPixel',
    'CameraAcquiring',
    'CameraDump',
    'CameraModel',
    'CameraName',
    'ControllerID',
    'CycleMode',
    'DeviceCount',
    'DeviceVideoIndex',
    'ElectronicShutteringMode',
    'EventEnable',
    'EventsMissedEvent',
    'EventSelector',
    'ExposureTime',
    'ExposureEndEvent',
    'ExposureStartEvent',
    'FanSpeed',
    'FirmwareVersion',
    'FrameCount',
    'FrameRate',
    'FullAOIControl',
    'ImageSizeBytes',
    'InterfaceType',
    'IOInvert',
    'IOSelector',
    'LUTIndex',
    'LUTValue',
    'MaxInterfaceTransferRate',
    'MetadataEnable',
    'MetadataFrame',
    'MetadataTimestamp',
    'Overlap',
    'PixelCorrection',
    'PixelEncoding',
    'PixelHeight',
    'PixelReadoutRate',
    'PixelWidth',
    'PreAmpGain',
    'PreAmpGainChannel',
    'PreAmpGainControl',
    'PreAmpGainSelector',
    'ReadoutTime',
    'RollingShutterGlobalClear',
    'RowNExposureEndEvent',
    'RowNExposureStartEvent',
    'SensorCooling',
    'SensorHeight',
    'SensorTemperature',
    'SensorWidth',
    'SerialNumber',
    'SimplePreAmpGainControl',
    'SoftwareTrigger',
    'SoftwareVersion',
    'SpuriousNoiseFilter',
    'SynchronousTriggering',
    'TargetSensorTemperature',
    'TemperatureControl',
    'TemperatureStatus',
    'TimestampClock',
    'TimestampClockFrequency',
    'TimestampClockReset',
    'TriggerMode',
    'VerticallyCenterAOI'
]


_AT_HANDLE_SYSTEM = 1

def _init_core_lib(corepath):
    if andor_wrapper._at_core_lib is not None:
        return
        
    andor_wrapper._at_core_lib = ctypes.CDLL(corepath)
    andor_wrapper._setup_core_functions()
    andor_wrapper._at_core_lib.AT_InitialiseLibrary()
    atexit.register(andor_wrapper._at_core_lib.AT_FinaliseLibrary)

def _init_util_lib(utilpath):
    if andor_wrapper._at_util_lib is not None:
        return
        
    andor_wrapper._at_util_lib = ctypes.CDLL(utilpath)
    andor_wrapper._setup_util_functions()
    andor_wrapper._at_util_lib.AT_InitialiseUtilityLibrary()
    atexit.register(andor_wrapper._at_util_lib.AT_FinaliseUtilityLibrary)

def _init_camera(desired_camera):
    if andor_wrapper._at_camera_handle is not None:
        return
    
    devices_attached = andor_wrapper._at_core_lib.AT_GetInt(_AT_HANDLE_SYSTEM, "DeviceCount")
    if devices_attached == 0:
        raise AndorError('No Andor SDK3 devices detected. Is the camera turned on?')
    # Even on the scope machine, the default Andor configuration includes two
    # virtual cameras, for a total of three camera devices.  A hardware camera
    # will take device index 0, provided you have only one hardware camera, and
    # we are very clearly working under this assumption.  We might then test
    # this assumption by querying the camera's name and ensuring that it matches
    # the name of our hardware camera:
    andor_wrapper._at_camera_handle = andor_wrapper._at_core_lib.AT_Open(0)
    if desired_camera and GetString('CameraModel') != desired_camera:
        andor_wrapper._at_core_lib.AT_Close(_at_camera_handle)
        andor_wrapper._at_camera_handle = None
        raise AndorError('Model name of Andor device 0, "' + camera_model_name + 
                         '", does not match the desired camera model name, "' +
                         model_name_of_desired_camera + '".')

    atexit.register(andor_wrapper._at_core_lib.AT_Close, andor_wrapper._at_camera_handle)
    
def initialize(desired_camera='ZYLA-5.5-CL3'):
    _init_core_lib('libatcore.so')
    _init_util_lib('libatutility.so')
    _init_camera(desired_camera)
